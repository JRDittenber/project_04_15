import sys  # Importing the sys module which provides access to some variables used or maintained by the interpreter and functions that interact with the interpreter.
from src.logger import logging  # Importing a logging function from a custom module called logger.



def error_message_details(error, error_detail: sys):
    """Generate a detailed error message with file name, line number, and error message.

    Args:
        error (Exception): The error that occurred.
        error_detail (module): A reference to the sys module.

    Returns:
        str: The formatted error message.
    """
    _, _, exc_tb = error_detail.exc_info()  # Extract the traceback information using the `exc_info` method of the `error_detail` module and unpack it to three variables.
    file_name = exc_tb.tb_frame.f_code.co_filename  # Extract the filename of the code that raised the error.
    error_message = 'Error in python script name [{0}] line number [{1}] error message [{2}]'.format(
        file_name, exc_tb.tb_lineno, str(error))  # Format the error message with the extracted information.
    return error_message  # Return the formatted error message.


class CustomException(Exception):
    """A custom exception class with a detailed error message that includes file name, line number, and error message.

    Attributes:
        error_message (str): The formatted error message.
    """

    def __init__(self, error_message, error_detail: sys):
        """Constructs a new CustomException object.

            error_message (str): The error message.
            error_detail (module): A reference to the sys module.
        """
        super().__init__(error_message)  # Call the parent constructor to set the CustomException object's error message.
        self.error_message = error_message_details(error_message, error_detail=error_detail)  # Assign the formatted error message, generated by the error_message_details function, to the CustomException object's error_message attribute.

    def __str__(self):
        """Returns the error message as a string."""
        return self.error_message  # Return the CustomException object's error message as a string.
